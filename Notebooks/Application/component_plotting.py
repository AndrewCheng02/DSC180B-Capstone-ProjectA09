#Imports
import matplotlib.pyplot as plt
import numpy as np
from nilearn import datasets, plotting, image
from nilearn.maskers import NiftiMapsMasker
from sklearn.decomposition import FastICA

labels = list(range(100))


def get_component_regions(component_vector, threshold = 0.21):
    '''Gets the regions of the PCA/ICA network given the component cutoff value (Around 0.2)
    With the pca regions, we can visualize the network region generated by that component.

    Args:
        component_vector (list)  -- eigen vector of the pca component
        
    Keyword Args:
        threshold (float)        -- the cutoff that determines if the region is part of the network
    
    Returns:
    (set) each region in the pca component
    '''
    dic = dict(zip(labels, component_vector))
    
    return set([i for i in dic if abs(dic[i]) > threshold])

def get_component_masker(component_vector, threshold = 0.21):
    '''Gets the masker of the component vector given the component cutoff value (Around 0.2).
    With the masker, we can visualize the pca component region scores in the network.

    Args:
        component_vector (list)  -- eigen vector of the pca component
        
    Keyword Args:
        threshold (float)        -- the cutoff that determines if the region is part of the network
    
    Returns:
        masker of each pca component
    '''
    
    masker = np.copy(component_vector)
    
    # Assigns component score to masker if above threshold, else assign 0
    vals = np.abs(component_vector) < threshold
    masker[vals] = 0
        
    return masker

def plot_component(component_vector, masker, atlas, mean_img = None, title = "", style = "region", 
             display_mode = "ortho", cut_coords = None, threshold = 0.21):
    '''Plots the PCA/ICA component vector given the component cutoff value (Around 0.2) with the given style.

    Args:
        component_vector (list)  -- eigen vector of the pca component
        
    Keyword Args:
        title (str)              -- title of plot
        style (str)              -- style of the plot: "region" by regions, "score" by regions with score
        display_mode (str)       -- display_mode of the plot
        cut_coords (float)       -- the cut coords of the plot
        threshold (float)        -- the cutoff that determines if the region is part of the network
    
    Returns:
        plots the pca component
    '''

    fig, axs = plt.subplots(1, 1, figsize = (18, 10))

    if style == "region":
        
        # Get Regions of the component
        regions = get_component_regions(component_vector, threshold)

        # Builds the altas of the different regions
        atlas_regions = image.concat_imgs([image.index_img(atlas, labels.index(i)) for i in regions])

        # Visualizes the regions of the component
        plotting.plot_prob_atlas(
            atlas_regions, draw_cross = False, title = title, axes=axs, 
            display_mode = display_mode, cut_coords = cut_coords
        )
    
    if style == "score":
        # Create Masker Images
        component_img = masker.inverse_transform(get_component_masker(component_vector, threshold))
        
        # Plotting PCA component with scores
        plotting.plot_stat_map(component_img, mean_img, 
                               title = title, axes=axs, display_mode = display_mode, cut_coords = cut_coords
                              )

        